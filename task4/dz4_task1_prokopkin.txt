#lang scheme
(require racket/vector)

(define empty-tree #())
(define make-tree vector)
(define (tree-data tree) (vector-ref tree 0))
(define (tree-left tree) (vector-ref tree 1))
(define (tree-right tree) (vector-ref tree 2))
(define (empty-tree? t) (equal? t #()))

(define (task-4-2021 tree h)

  ;возвращает пару (высота поддерева, является ли поддерево левым деревом фибоначчи)
  (define (height-of-tree-fibonacci tree)
    (cond ( (empty-tree? tree) (cons 0 #t))
          ( (and (empty-tree? (tree-left tree)) (empty-tree? (tree-right tree))) (cons 1 #t))
          ( (let ((res-left (height-of-tree-fibonacci (tree-left tree))) (res-right (height-of-tree-fibonacci (tree-right tree))))
              (if (and (cdr res-left) (cdr res-right) (= (car res-left) (add1 (car res-right)))) (cons (add1 (car res-left)) #t)
                  (cons (add1 (car res-left)) #f))))
          )
    )
  
  (let ((result (height-of-tree-fibonacci tree)))
    (and (cdr result) (= (car result) h)))
  )


(task-4-2021 #() 0)
(task-4-2021 #(1 #() #()) 1)
(task-4-2021 #() 1)






        